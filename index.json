[
{
	"uri": "/",
	"title": "PrivateLink",
	"tags": [],
	"description": "",
	"content": "Access Shared Service on Service Provider from On-Premise use PrivateLink and Site to Site VPN Overall In this lab, we practice with AWS Site-to-Site and PrivateLink Content Introduction Preparation Create EC2 server Site to Site VPN Configuration PrivateLink Configuration Result Resource Cleanup "
},
{
	"uri": "/3-createec2/3.1-createnatgw/",
	"title": "Create NAT Gateway",
	"tags": [],
	"description": "",
	"content": "Create Nat Gateway Create an Elastic IP address Access EC2 Select Elastic IPs Select Allocate Elastic IP address In the interface Allocate Elastic IP address Public IPv4 address pool, select Amazonâ€™s pool of IPv4 addresses Select Allocate We have just successfully created a Public IP Address Create Nat Gateway Access to VPC Select NAT Gateways In the NAT gateway interface Name, enter NAT-Provider Subnet, select PublicSubnet-Provider Connectivity type, select Public Elastic IP allocation ID, select the newly created Elastic IP. Select Create NAT gateway Successfully created NAT gateway Edit Route tables RTB-PrivateSubnet-Provider and RTB-PublicSubnet-Provider to allow instances inside the Private subnet to access the Internet via NAT Access VPC Select Route tables Select RTB-PrivateSubnet-Provider , select the Route tab and press Edit routes In the Edit routes interface Select Add route Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section select NAT Gateway, then select the NAT Gateway we created. NAT Gateway will be automatically populated. Select Save changes 3. In the Route tables interface\nSelect RTB-PublicSubnet-Provider In the Routes tab, select Edit routes In the Edit routes interface Select Add route Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section select Internet Gateway, then select the Internet Gateway we created. Internet Gateway ID will be automatically filled in. Select Save changes "
},
{
	"uri": "/5-privatelinkconfig/5.1-createtg/",
	"title": "Create Target Group",
	"tags": [],
	"description": "",
	"content": "Create Target Group In the EC2 interface select Target Group Select Create target groups In the Create target group interface Select Instances in Choose a target type Target group name enter TG Protocol:Port, select TCP VPC, select Provider VPC Health checks, select TCP Select Next to continue In the Register targets interface, select 2 instances WebServer1* and WebServer2 and then select Include as pending below Select Create* Complete creating Target groups We can see Targets\u0026rsquo;s Health status is Unused because there is no Load Balancer linked yet. "
},
{
	"uri": "/4-sitetositeconfig/4.1-createvpg/",
	"title": "Create Virtual Private Gateway",
	"tags": [],
	"description": "",
	"content": "For our EC2 instances to be able to send session logs to the S3 bucket, we will need to update the IAM Role assigned to the EC2 instance by adding a policy that allows access to S3.\nUpdate IAM Role Go to IAM service management console Click Roles. In the search box, enter SSM. Click on the SSM-Role role. Click Attach policies. In the Search box enter S3. Click the policy AmazonS3FullAccess. Click Attach policy. In the production environment, we will grant stricter permissions to the specified S3 bucket. In the framework of this lab, we use the policy AmazonS3FullAccess for convenience.\nNext, we will proceed to create an S3 bucket to store session logs.\n"
},
{
	"uri": "/2-prerequiste/2.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create 3 VPCs corresponding to the architecture below.\nOn-Premise: VPC simulates a branch environment\nConsumer VPC: VPC of the service consumer\nProvider VPC: VPC of the service provider\nThe architectural overview after you complete this step will be as follows:\nCreate VPC On-Premise Access the AWS Management Console interface Find VPC Select VPC In the VPC interface Select Your VPC Select Create VPC Proceed with the steps to create a VPC Resource, select VPC only\nName tag, enter On-Premise\nIPv4 CIDR, enter 10.12.0.0/16\nScroll down and select Create VPC\nThe Tennacy configuration part we will leave at the default mechanism. If we switch to Dedicated there will be some EC2 Instance types that are not suitable and will not be created in VPC with tennacy mode of Dedicate\nComplete creating VPC\nCreate VPC Consumer Do the same on the VPC interface Select Your VPC then select Create VPC Proceed with the steps to create VPC Resource, select VPC only\nName tag, enter Consumer\nIPv4 CIDR, enter 10.11.0.0/16\nScroll down and select Create VPC\nComplete creating VPC Create VPC Provider Do the same on the VPC interface Select Your VPC then select Create VPC Proceed with the steps to create VPC Resource, select VPC only\nName tag, enter ``Provider```\nIPv4 CIDR, enter 10.10.0.0/16\nScroll down and select Create VPC\nComplete creating VPC "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "\nIntroducing AWS PrivateLink AWS PrivateLink is a highly available, scalable technology that you can use to privately connect your VPC to services as if they were in your VPC. You do not need to use an internet gateway, NAT device, public IP address, AWS Direct Connect connection, or AWS Site-to-Site VPN connection to allow communication with the service from your private subnets. Therefore, you control the specific API endpoints, sites, and services that are reachable from your VPC.\nService providers The owner of a service is the service provider. Service providers include AWS, AWS Partners, and other AWS accounts. Service providers can host their services using AWS resources, such as EC2 instances, or using on-premises servers.\nEndpoint services A service provider creates an endpoint service to make their service available in a Region. A service provider must specify a load balancer when creating an endpoint service. The load balancer receives requests from service consumers and routes them to your service. By default, your endpoint service is not available to service consumers. You must add permissions that allow specific AWS principals to connect to your endpoint service.\nService names Each endpoint service is identified by a service name. A service consumer must specify the name of the service when creating a VPC endpoint. Service consumers can query the service names for AWS services. Service providers must share the names of their services with service consumers.\nService states The following are the possible states for an endpoint service:\nPending - The endpoint service is being created. Available - The endpoint service is available. Failed - The endpoint service could not be created. Deleting - The service provider deleted the endpoint service and deletion is in progress. Deleted - The endpoint service is deleted. Service consumers The user of a service is a service consumer. Service consumers can access endpoint services from AWS resources, such as EC2 instances, or from on-premises servers.\nVPC endpoints A service consumer creates a VPC endpoint to connect their VPC to an endpoint service. A service consumer must specify the service name of the endpoint service when creating a VPC endpoint. There are multiple types of VPC endpoints. You must create the type of VPC endpoint that\u0026rsquo;s required by the endpoint service.\nInterface - Create an interface endpoint to send TCP traffic to an endpoint service. Traffic destined for the endpoint service is resolved using DNS. GatewayLoadBalancer - Create a Gateway Load Balancer endpoint to send traffic to a fleet of virtual appliances using private IP addresses. You route traffic from your VPC to the Gateway Load Balancer endpoint using route tables. The Gateway Load Balancer distributes traffic to the virtual appliances and can scale with demand. There is another type of VPC endpoint, Gateway, which creates a gateway endpoint to send traffic to Amazon S3 or DynamoDB. Gateway endpoints do not use AWS PrivateLink, unlike the other types of VPC endpoints.\nEndpoint network interfaces An endpoint network interface is a requester-managed network interface that serves as an entry point for traffic destined to an endpoint service. For each subnet that you specify when you create a VPC endpoint, we create an endpoint network interface in the subnet.\nIf a VPC endpoint supports IPv4, its endpoint network interfaces have IPv4 addresses. If a VPC endpoint supports IPv6, its endpoint network interfaces have IPv6 addresses. The IPv6 address for an endpoint network interface is unreachable from the internet. When you describe an endpoint network interface with an IPv6 address, notice that denyAllIgwTraffic is enabled.\nThe IP addresses of an endpoint network interface will not change during the lifetime of its VPC endpoint.\nEndpoint policies A VPC endpoint policy is an IAM resource policy that you attach to a VPC endpoint. It determines which principals can use the VPC endpoint to access the endpoint service. The default VPC endpoint policy allows all actions by all principals on all resources over the VPC endpoint.\nEndpoint states When you create a VPC endpoint, the endpoint service receives a connection request. The service provider can accept or reject the request. If the service provider accepts the request, the service consumer can use the VPC endpoint after it enters the Available state.\nThe following are the possible states for a VPC endpoint:\nPendingAcceptance - The connection request is pending. This is the initial state if requests are manually accepted. Pending - The service provider accepted the connection request. This is the initial state if requests are automatically accepted. The VPC endpoint returns to this state if the service consumer modifies the VPC endpoint. Available - The VPC endpoint is available for use. Rejected - The service provider rejected the connection request. The service provider can also reject a connection after it is available for use. Expired - The connection request expired. Failed - The VPC endpoint could not be made available. Deleting - The service consumer deleted the VPC endpoint and deletion is in progress. Deleted - The VPC endpoint is deleted. Introducing VPN Site to Site One of the most common ways that customers connect securely to AWS from on premises is by using the AWS Site-to-Site VPN managed IPSec VPN solution. One key benefit our customers look for when using the service is not having to manage 3rd-party or custom VPN solutions built using EC2 instances. The native service is already built to be highly-available with two tunnels in two different Availability Zones and has native integration with AWS Transit Gateway (via a VPN attachment) which allows customers to scale the connectivity to multiple VPCs with a single Transit Gateway-based VPN connection.\nConcepts The following are the key concepts for Site-to-Site VPN:\nVPN connection: A secure connection between your on-premises equipment and your VPCs.\nVPN tunnel: An encrypted link where data can pass from the customer network to or from AWS.\nEach VPN connection includes two VPN tunnels which you can simultaneously use for high availability.\nCustomer gateway: An AWS resource which provides information to AWS about your customer gateway device.\nCustomer gateway device: A physical device or software application on your side of the Site-to-Site VPN connection.\nTarget gateway: A generic term for the VPN endpoint on the Amazon side of the Site-to-Site VPN connection.\nVirtual private gateway: A virtual private gateway is the VPN endpoint on the Amazon side of your Site-to-Site VPN connection that can be attached to a single VPC.\nTransit gateway: A transit hub that can be used to interconnect multiple VPCs and on-premises networks, and as a VPN endpoint for the Amazon side of the Site-to-Site VPN connection.\n"
},
{
	"uri": "/4-sitetositeconfig/4.2-createcg/",
	"title": "Create Customer Gateway",
	"tags": [],
	"description": "",
	"content": "Create Customer Gateway Access to VPC Select Customer Gateways Select Create Customer Gateway In the Create Customer Gateway interface Name tag, enter CGW IP address, enter the public IP address of the Customer Gateway server. *Select Create Customer Gateway Wait about 5 minutes, then complete creating Customer Gateway Note: according to the architectural model, the Customer Gateway will be located in the VPC on the onpremise environment. What we are currently doing is declaring to AWS that we will have a Customer Gateway with a public IP address that is the public address of the EC2 instance: Customer Gateway is in the On-Premise VPC.\n"
},
{
	"uri": "/3-createec2/3.2-createec2/",
	"title": "Create EC2",
	"tags": [],
	"description": "",
	"content": "\nGo to EC2 service management console. Click on Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. At the Modify IAM role page. Click to select SSM-Role. Click Save. You will need to wait about 10 minutes before performing the next step. This time our EC2 instance will automatically register with the Session Manager.\nGo to the AWS Systems Manager service management console Drag the left menu slider down. Click Session Manager. Click Start Session. Then select Public Linux Instance and click Start session to access the instance. Terminal will appear on the browser. Testing with the command sudo tcpdump -nn port 22 and sudo tcpdump we will see no SSH traffic but only HTTPS traffic. Above, we have created a connection to the public instance without opening SSH port 22, for better security, avoiding any attack to the SSH port.\nOne disadvantage of the above method is that we have to open the Security Group outbound at port 443 to the internet. Since it\u0026rsquo;s a public instance, it probably won\u0026rsquo;t be a problem, but if you want extra security, you can block port 443 to the internet and still use the Session Manager. We will go through this in the private instance section below.\nYou can click terminate to end the currently connected session before proceeding to the next step.\n"
},
{
	"uri": "/5-privatelinkconfig/5.2-createnlb/",
	"title": "Create Network Load Balancer",
	"tags": [],
	"description": "",
	"content": "Create Network Load balancer In the EC2 interface select Load balancers Select Create load balancer Create Network Load Balancer In the Create load balancer interface, select Create in the *Network Load Balancer section Load balancer name, enter NLB Scheme, select Internal VPC, select Provider VPC Mappings selects the map with PrivateSubnet1-Provider in AZ us-east-1a and PrivateSubnet2-Provider in AZ us-ease-1b Security groups, select SG-PrivateSubnet-Provider In the Listeners and routing section, in the Default action section, select the TG you just created Select Create to complete creating Network Load Balancer 3.Check Healthcheck status of Target groups After creating Network Load Balancer, Healthcheck status of Target groups is Initial After the default configured Health check period of 5 times, the status will change to Healthy "
},
{
	"uri": "/2-prerequiste/2.2-createsubnet/",
	"title": "Create Subnet",
	"tags": [],
	"description": "",
	"content": "Create Subnet In the VPC interface Select Subnet\nSelect Create subnet\nIn the interface ** Create subnet ** Select On-Premise VPC Perform subnet settings Subnet name, enter ``` PublicSubnet-OnPremise**\nSelect AZ us-ease-1a\nIpv4 CIDR block , enter 10.12.1.0/24\nScroll down and click Create subnet*\n4. Complete creating subnet\nDo the same to create additional subnets PrivateSubnet1-Consumer belongs to Consumer VPC with CIDR of 10.11.1.0/24 located in Availability Zone us-east-1a PrivateSubnet2-Consumer belongs to Consumer VPC with CIDR of 10.11.2.0/24 located in Availability Zone us-east-1b PrivateSubnet1-Provider belongs to Provider VPC with CIDR of 10.10.1.0/24 located in Availability Zone us-east-1a PrivateSubnet2-Provider belongs to Provider VPC with CIDR of 10.10.2.0/24 located in Availability Zone us-east-1b PublicSubnet-Provider belongs to Provider VPC with CIDR of 10.10.3.0/24 located in Availability Zone us-east-1a You can see there are 2 columns, Availability Zone and Availability Zone ID. To avoid EC2 resources being used unevenly, (we often tend to use AZ a to run primary and AZ b to stand by, for example), AWS will randomly assign Availability Zone to ** Availability Zone ID**. We can understand that Availability Zone is a form of alias, and Availability Zone ID is the identifier. For example, in the image above Availability Zone ap-southeast-1a is assigned Availability Zone ID as apse1-az2. In another AWS account, Availability Zone ap-southeast-1a might have an Availability Zone ID of apse1-az1.\nEnable Enable auto-assign public IPv4 address for Public subnets Select PublicSubnet-OnPremise , select Actions, select Edit subnet settings Select Enable auto-assign public IPv4 address\nClick Save\nThe same is done with PublicSubnet-Provider\nSelect PublicSubnet-OnPremise , select Actions, select Edit subnet settings\nSelect Enable auto-assign public IPv4 address\nClick Save\nAnother notable point is that the subnets are basically the same. Through route table configuration and public IP address allocation, we can divide them into Public and Private Subnets.\n"
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this exercise, we will build a model according to the diagram below: Ná»™i dung Create VPC Create Subnet Create Internet Gateway Create Route Table Create Security Group "
},
{
	"uri": "/3-createec2/",
	"title": "Create EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent Create NAT Gateway Create EC2 server Create EC2 Instance Connect Endpoint "
},
{
	"uri": "/3-createec2/3.3-createec2ice/",
	"title": "Create EC2 Instance Connect Endpoint",
	"tags": [],
	"description": "",
	"content": "\nGo to EC2 service management console. Click on Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. At the Modify IAM role page. Click to select SSM-Role. Click Save. You will need to wait about 10 minutes before performing the next step. This time our EC2 instance will automatically register with the Session Manager.\nGo to the AWS Systems Manager service management console Drag the left menu slider down. Click Session Manager. Click Start Session. Then select Public Linux Instance and click Start session to access the instance. Terminal will appear on the browser. Testing with the command sudo tcpdump -nn port 22 and sudo tcpdump we will see no SSH traffic but only HTTPS traffic. Above, we have created a connection to the public instance without opening SSH port 22, for better security, avoiding any attack to the SSH port.\nOne disadvantage of the above method is that we have to open the Security Group outbound at port 443 to the internet. Since it\u0026rsquo;s a public instance, it probably won\u0026rsquo;t be a problem, but if you want extra security, you can block port 443 to the internet and still use the Session Manager. We will go through this in the private instance section below.\nYou can click terminate to end the currently connected session before proceeding to the next step.\n"
},
{
	"uri": "/5-privatelinkconfig/5.3-createendpointservice/",
	"title": "Create Endpoint Service",
	"tags": [],
	"description": "",
	"content": "Create Endpoint Services In VPC, select Endpoint services and select Create endpoint service In Create endpoint service Enter Name as PrivateLink Load balancer type, select Network Available load balancers, select NLB and select Create to create Complete creating Endpoint services Copy Service name to create Endpoint "
},
{
	"uri": "/2-prerequiste/2.3-createigw/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Create Internet Gateway In the VPC interface Select ** Internet Gateways **\nSelect ** Create internet gateway**\nPerform configuration Name tag, enter IGW-OnPremise\nSelect Create internet gateway\nComplete creating Internet Gateway and implementing Attach VPC Select Actions\nSelect Attach to VPC\nSelect On-Premise, VPC ID will be filled in automatically\nSelect ** Attach internet gateway**\nWhen successfully attached State Internet gateway will switch to Attached Similarly, create Internet Gateway and attach to VPC Provider Name tag, enter IGW-Provider Select Create internet gateway Select On-Provider, VPC ID will be filled in automatically Select Attach internet gateway "
},
{
	"uri": "/4-sitetositeconfig/4.3-createvpnconnection/",
	"title": "Create VPN Connection",
	"tags": [],
	"description": "",
	"content": "Create VPN connection Access VPC Select Site-to-Site VPN Connections Select Create VPN Connection In the Create VPN Connection interface Name tag, enter VPN Target Gateway Type: Select VPG Virtual Private Gateway: Select VPN Gateway Customer Gateway: Existing Customer Gateway ID: Select CWG Continue to perform configuration Routing Options: Static Static IP Prefixes: 10.12.0.0/16. This is the IP address resolution in the simulated Onpremise environment. Other configurations remain the default. Select Create VPN Connection Complete creating VPN Connection, wait about 5 minutes and the status will change to Available Configure propagation for RTB-PrivateSubnet-Consumer* In the VPC interface, select Route tables Select RTB-PrivateSubnet-Consumer Select Route Propagation Select Edit propagation route In the interface Edit route propagation Select Enable Select Save Complete and check again that Route Propagation has changed to Yes "
},
{
	"uri": "/4-sitetositeconfig/4.4-configcg/",
	"title": "Configure Customer Gateway",
	"tags": [],
	"description": "",
	"content": "Configure Customer Gateway Access to VPC Select Site-to-Site VPN Connection Select the created VPN Connection Select Download Configuration In the Download Configuration dialog box, select the appliance that is appropriate for you: In this exercise, we will use OpenSwan. Vendor: Select OpenSwan Platform: Select OpenSwan Software: Select OpenSwan 2.6.38+ IKE version: Select ikev1 Select Download. Save the picture file information to the folder we use to store key pairs and tools for the lab. Then based on the configuration provided, you change the appropriate information and configuration for your device. Connect to EC2 Customer Gateway In the EC2 interface, select Instances, select Customer GW*, select Connect In the Connect to instance interface In the Connection Type section, select Connect using EC2 Instance Connect, because Customer GW belongs to the Public subnet, so we use EC2 Instance Connect Select Connect Connection completed Install OpenSwan sudo su\ryum install openswan -y 5. Check the configuration file /etc/ipsec.conf\nen /etc/ipsec.conf Check the configuration as shown below. Press the ESC key and the combination :q! to exit the vi editor. Configure file /etc/sysctl.conf en /etc/sysctl.conf Press i key to edit the file. Add the following snippet to the end of the configuration file net.ipv4.ip_forward = 1\rnet.ipv4.conf.all.accept_redirects = 0\rnet.ipv4.conf.all.send_redirects = 0 Press the ESC key and the combination :wq! to save the configuration file Then to apply this configuration, run the command: sysctl -p 8. Next we will configure the file /etc/ipsec.d/aws.conf\nen /etc/ipsec.d/aws.conf Press i key to edit the file. Add the following snippet to the configuration file. We will create 2 Tunnels with information taken from the VPN Connection configuration file you downloaded and saved in the folder containing the key pair previously. Make sure you edit the appropriate IP address and network layer before copying the above configuration. For Amazon Linux, we will remove the auth=esp line in the original configuration file. Because we only have 1 public IP address for Customer Gateway, we will need to add configuration overlapip=yes. leftid: IP Public Address on OnPremise side. (Here is the public IP of EC2 Customer GW in On-Premise VPC). right: IP Public Address on AWS VPN Tunnel side. leftsubnet: CIDR of Local Network (If there are multiple network layers, you can leave it as 0.0.0.0/0). rightsubnet: CIDR of the Private Subnet Network on AWS. conn Tunnel1\rauthby=secret\rauto=start\rleft=%defaultroute\rleftid=3.88.57.67\rright=34.226.49.224\rtype=tunnel\rikelifetime=8h\rkeylife=1h\rphase2alg=aes128-sha1;modp1024\rike=aes128-sha1;modp1024\rkeyingtries=%forever\rkeyexchange=ike\rleftsubnet=10.12.0.0/16\rrightsubnet=10.11.0.0/16\rdpddelay=10\rdpdtimeout=30\rdpdaction=restart_by_peer\roverlapip=yes\rconn Tunnel2\rauthby=secret\rauto=start\rleft=%defaultroute\rleftid=3.88.57.67\rright=52.70.128.251\rtype=tunnel\rikelifetime=8h\rkeylife=1h\rphase2alg=aes128-sha1;modp1024\rike=aes128-sha1;modp1024\rkeyingtries=%forever\rkeyexchange=ike\rleftsubnet=10.12.0.0/16\rrightsubnet=10.11.0.0/16\rdpddelay=10\rdpdtimeout=30\rdpdaction=restart_by_peer\roverlapip=yes Press the ESC key and the combination :wq! to save the configuration file Check the next step in the configuration file we downloaded. Create and configure file etc/ipsec.d/aws.secrets Create a new file with the following configuration to set up authentication for 2 Tunnels. Run the command vi /etc/ipsec.d/aws.secrets to create files and configurations touch /etc/ipsec.d/aws.secrets Press i key to edit the file. Add the following configuration snippet to the end of the configuration file (this config snippet is in step 5 of IPSEC Tunnel #1 and IPSEC Tunnel #2) Press the ESC key and the combination :wq! to save the configuration file Restart Network service \u0026amp; IPSEC service systemctl restart network\rsystemctl enable ipsec.service\rsystemctl start ipser.service\rsystemctl status ipser.service If the tunnel status is still not running properly, after checking and updating the configuration you will need to run the command to restart the service network and IPsec : systemctl restart network\rsystemctl restart ipsec.service 12. After the service has run, wait a few minutes and then try to ping from the Customer Gateway server to the EC2 Consumer server. If the VPN configuration is successful, you will get the results below.\nping \u0026lt;EC2 Private IP\u0026gt; "
},
{
	"uri": "/5-privatelinkconfig/5.4-createendpoint/",
	"title": "Create Endpoint",
	"tags": [],
	"description": "",
	"content": "Create Endpoint In VPC, select Endpoint and select Create endpoint In Create endpoint Name tag, enter EndpointPrivateLink Service category, select Other endpoint services Service name, enter the Service name you copied in the previous step and press Verify service VPC, select Consumer VPC Subnet select both private subnets in 2 AZs to be able to operate with NLB on both AZs Security groups, select SG-PrivateSubnet-Consumer Select Create endpoint Complete creating Endpoint We can see the status is Pending acceptance Accept connection request Endpoint To accept Endpoint connection requests, in VPC, select Endpoint services Select PrivateLink, select Endpoint connections tab, select Endpoint connection waiting to accept, select Action, select Accept endpoint connection request Enter accept and select Accept Complete Accept and check status Wait for State to change to Available "
},
{
	"uri": "/2-prerequiste/2.4-creatertb/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "Create Route Table Create Route Table for PublicSubnet-OnPremise In the VPC interface Select Route Tables Select Create route table Proceed to configure Route table Name, enter RTB-PublicSubnet-OnPremise VPC, select On-Premise VPC, VPC id will be automatically filled in Select Create route table Complete creating Route table Perform Edit subnet associations Select Subnet associations Select Edit subnet associations 5. In step Edit subnet associations\nSelect PublicSubnet-OnPremise Select ** Save associations** 6. Perform Edit route to route out to the internet through Internet Gateway\nSelect Edit routes In the Edit routes interface Select Add route Fill in the Destination CIDR : 0.0.0.0/0 representing the Internet. In the Target section select Internet Gateway, then select the Internet Gateway we created. Internet Gateway ID will be automatically filled in. Select Save changes Complete and review Routes Create Route Table for PrivateSubnet-Consumer In the VPC interface Select Route Tables Select Create route table Proceed to configure Route table Name, enter RTB-PrivateSubnet-Consumer VPC, select Consumer VPC, VPC id will be automatically filled in Select Create route table Complete creating Route table Perform Edit subnet associations Select Subnet associations Select Edit subnet associations In step Edit subnet associations Select PrivateSubnet1-Consumer and PrivateSubnet2-Consumer Select ** Save associations** Create Route Table for PrivateSubnet-Provider In the VPC interface Select Route Tables Select Create route table Proceed to configure Route table Name, enter RTB-PrivateSubnet-Provider VPC, select Provider VPC, VPC id will be automatically filled in Select Create route table Complete creating Route table Perform Edit subnet associations Select Subnet associations Select Edit subnet associations In step Edit subnet associations Select PrivateSubnet1-Provider and PrivateSubnet2-Provider Select ** Save associations** Create Route Table for PublicSubnet-Provider In the VPC interface Select Route Tables Select Create route table Proceed to configure Route table Name, enter RTB-PublicSubnet-Provider VPC, select Provider VPC, VPC id will be automatically filled in Select Create route table Complete creating Route table Perform Edit subnet associations Select Subnet associations Select Edit subnet associations In step Edit subnet associations Select PublicSubnet-Provider Select ** Save associations** "
},
{
	"uri": "/4-sitetositeconfig/",
	"title": "VPN Site to Site Configuration",
	"tags": [],
	"description": "",
	"content": "We can connect the On-premise data center to Amazon VPC using hard or soft VPN depending on the purpose and actual usage needs. To establish a Site to Site VPN connection, we will need to create and configure a Virtual Private Gateway VPG and a Customer Gateway CGW.\nVirtual Private Gateway (VPG) is a control center connecting the virtual private network (VPN) installed on top of AWS. A Customer Gateway (CGW) is a component that represents a hard or soft VPN device installed at the Customer end. VPN tunnel will be established immediately after data traffic is transmitted between AWS and the customer\u0026rsquo;s network. In that connection, we must specify the type of routing that will be used to ensure safety and quality in terms of data transmission. If the CGW on the customer side supports Border Gateway Protocol (BGP), then in the VPN connection configuration we must set the routing to dynamic routing. Otherwise, we must configure the connection routing as static routing. In case of using static routing, we must enter the exact necessary routes for the connection from the Customer side to the VPG set up at the AWS end. At the same time, routing for the VPC must also be configured to propagate to allow resources to exchange data in and out of the VPN tunnel connection between AWS and the Customer\u0026rsquo;s network system. Amazon VPC offers a variety of CGWs, and each CGW is assigned to a VPG, but a VPG can be associated with multiple CGWs (many-to-one design). . To support this model, CGW\u0026rsquo;s IP address must be unique within a region. Amazon VPC also provides the necessary information for Network Administrators to configure CGW and establish VPN connections to VPG on AWS. VPN connection always includes 2 Internet Protocol Security (IPSec) tunnels to ensure high availability of the connection. Below are the important features we need to know about VPG, CGW, and VPN: VPG is the front-end component of VPN tunnel located on AWS. CGW can be a hardware device or software application located on the Customer end of the VPN tunnel connection. You must initiate a VPN tunnel connection from CGWto VPG. VPG supports both dynamic routing (BGP) and static routing. VPN connection always has 2 tunnels to ensure high availability for connecting to VPC from the Customer site. The lab helps us learn how to establish a Site to Site VPN connection in AWS. In fact, this solution is quite popular due to its low cost and very easy configuration because AWS provides instructions for each type of device on the Customer end. The only thing the Customer cares about is preparing an internet connection to create a secure, secret tunnel (using IPSec) to connect to AWS through AWS VPN tunnel. Within the scope of the lab, assume that we have a Main office (VPC Consumer) and a Branch office (VPC Customer) located at 2 VPCs. On each VPC, create an EC2 that allows SSH from the outside, but does not have the ability to connect and ping each other using the Private IP address of each EC2. What we need to do is configure the VPN so that Private IP addresses can ping each other using Site-to-Site VPN. Content Create Virtual Private Gateway Create Customer Gateway Create VPN Connection Customer Gateway Configuration "
},
{
	"uri": "/2-prerequiste/2.5-createsg/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Create a Security Group for the server located in PrivateSubnet-Provider In the VPC interface Select Security Group Select Create security group Configure Security group Security Group name, enter SG-PrivateSubnet-Provider Description, enter Allow SSH,Ping,HTTP Select Provider VPC Configure Inbound rules In Inbound rules, click Add rule.\nSelect Type: SSH and Source: Anywhere. Anywhere represents any IPv4 address\nSelect Add rule to add a new rule.\nSelect Type: All ICMP - IPv4 and Source: Anywhere. Allow ping from any IP address.\nSelect Add rule to add a new rule.\nSelect Type : HTTP and Source: Anywhere. Allows HTTP access from any IP address.\nBy default Outbound rules will allow all outbound traffic Select Create security group Complete creating security group for the server located in the Public subnet "
},
{
	"uri": "/5-privatelinkconfig/",
	"title": "PrivateLink Configuration",
	"tags": [],
	"description": "",
	"content": "Configure PrivateLink according to the following architecture Content Create Target Group Create Network Load Balancer Create Endpoint Service Create Endpoint "
},
{
	"uri": "/6-result/",
	"title": "Result",
	"tags": [],
	"description": "",
	"content": "Check the result In VPC, select Endpoints, select EndpointPrivateLink and copy DNS names to check connection from On-Premise to Provider and from Consumer to Provider VPC There are 3 lines of DNS names, the first 1 line is DNS name corresponding to services in both AZs, the 2 lines below correspond to each AZ On machine EC2-Consumer Execute orders curl \u0026lt;DNS name\u0026gt; or\ncurl \u0026lt;Ip\u0026gt;:80 IP is the private IP address of 2 Webserver in Provider VPC We get results On the machine Customer GW Execute orders curl \u0026lt;DNS name\u0026gt; We get results "
},
{
	"uri": "/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Resource cleanup We will proceed to delete resources in the following order\nTerminate EC2 Instances. Terminate EC2 instance. Access the Amazon EC2 console at the EC2 address. On the left navigation bar, select Instances Select all EC2 Instances related to the lab. Select Instance state Select Terminate instance Confirm termination. Delete NAT Gateway, Elastic IP Address Delete NAT Gateway and Elastic IP Address. AWS will collect money for wasted EIPs, so you need to check carefully to avoid unexpected cost deductions. Access the Amazon VPC console page at the VPC address On the left navigation bar, click NAT Gateway. Select NAT Gateway. Click Action. Click Delete NAT Gateway. Type delete. Click Delete to confirm deletion of NAT Gateway Delete Elastic IP Address Continue deleting Elastic IP Address. Visit the Amazon VPC console page at https://console.aws.amazon.com/vpc/ On the left navigation bar, click Elastic IP. Select the Elastic IP Address we created. Click Action. Click Release Elastic IP Address Click Release. Delete EC2 Instance connect endpoint Access to transaction Endpoint Select Action, select Delete VPC endpoints Enter delete Continue doing the same and delete in the following order VPN Site to Site connection.\nVirtual Private Gateway Customer Gateway Endpoint services Network Load Balancer Target Groups Provider VPC Consumer VPC On-Premise VPC "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]